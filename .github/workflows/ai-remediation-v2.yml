name: AI Security Remediation

on:
  workflow_run:
    workflows: ["Security Scan Pipeline"]
    types:
      - completed

permissions:
  contents: write
  actions: write
  security-events: write
  pull-requests: write
  issues: write

jobs:
  ai-fix-generation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Debug permissions and API
        env:
          TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Checking repository permissions..."
          curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/malayu21/Test-for-Devsecops/collaborators/malayu21/permission | jq .
          echo "Checking rate limit..."
          curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/rate_limit | jq .
          echo "Checking available artifacts for run ${{ github.event.workflow_run.id }}..."
          curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/malayu21/Test-for-Devsecops/actions/runs/${{ github.event.workflow_run.id }}/artifacts | jq .
          echo "Workflow run details..."
          curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/malayu21/Test-for-Devsecops/actions/runs/${{ github.event.workflow_run.id }} | jq .

      - name: Wait for artifact availability
        run: |
          echo "Waiting for artifact to be available..."
          sleep 30

      - name: Download security results
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: security-results
          path: ./security-results/
          run-id: ${{ github.event.workflow_run.id }}
        continue-on-error: true

      - name: Retry download security results
        if: steps.download-artifact.outcomes.success != true
        env:
          TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo "Retrying artifact download..."
          ARTIFACT_ID=$(curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/malayu21/Test-for-Devsecops/actions/runs/${{ github.event.workflow_run.id }}/artifacts | \
            jq -r '.artifacts[] | select(.name == "security-results") | .id')
          if [ -z "$ARTIFACT_ID" ]; then
            echo "Error: No security-results artifact found"
            exit 1
          fi
          echo "Found artifact ID: $ARTIFACT_ID"
          curl -s -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" \
            -L https://api.github.com/repos/malayu21/Test-for-Devsecops/actions/artifacts/$ARTIFACT_ID/zip -o security-results.zip
          unzip -o security-results.zip -d ./security-results/ || { echo "Failed to unzip artifact"; exit 1; }
          ls -l ./security-results/

      - name: Verify artifact
        run: |
          echo "Checking security-results artifact..."
          ls -l ./security-results/ || { echo "No files found in security-results directory"; exit 1; }
          if [ ! -f ./security-results/merged-results.json ]; then
            echo "Error: merged-results.json not found in security-results artifact"
            ls -l ./security-results/
            exit 1
          fi
          echo "Artifact contents:"
          cat ./security-results/merged-results.json

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
          python -m pip install --upgrade pip
          pip install -r requirements.txt || { echo "Failed to install requirements.txt"; exit 1; }

      - name: Generate AI fixes
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        run: |
          echo "Running ai_remediation.py..."
          python scripts/ai_remediation.py \
            --input ./security-results/merged-results.json \
            --output ./fixes.json || { echo "AI remediation failed"; cat ./fixes.json || echo "No fixes.json generated"; exit 1; }
          ls -l ./fixes.json || { echo "fixes.json not found"; exit 1; }
          cat ./fixes.json

      - name: Apply fixes
        run: |
          echo "Running apply_fixes.py..."
          python scripts/apply_fixes.py --fixes ./fixes.json || { echo "Apply fixes failed"; exit 1; }

      - name: Create fix branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "AI Security Bot"
          BRANCH_NAME="ai-security-fixes-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          git add .
          git status
          git commit -m "AI Security Fixes

          Applied automated fixes for security vulnerabilities:
          $(cat fixes-summary.txt)

          Please review these changes carefully before merging." || exit 0
          git push --force origin $BRANCH_NAME || { echo "Failed to push branch $BRANCH_NAME"; exit 1; }
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Branch $BRANCH_NAME pushed successfully"

      - name: Create Pull Request
        env:
          TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          RESPONSE=$(curl -s -o response.json -w "%{http_code}" -H "Authorization: Bearer $TOKEN" -H "Accept: application/vnd.github.v3+json" \
            -X POST -d "{\"title\":\"AI Security Fixes - $(date +%Y-%m-%d)\",\"head\":\"${{ env.BRANCH_NAME }}\",\"base\":\"main\",\"body\":\"Automated Security Fixes\n\n$(cat fixes-summary.txt)\n\n- These fixes were generated by AI and need human review\n- Test thoroughly before merging\n- Some fixes might need manual adjustment\n- Check that functionality still works as expected\n\n- SAST Issues: $(jq '.sast | length' ./security-results/merged-results.json)\n- Dependency Issues: $(jq '.dependencies | length' ./security-results/merged-results.json)\n- DAST Issues: $(jq '.dast | length' ./security-results/merged-results.json)\"}" \
            https://api.github.com/repos/malayu21/Test-for-Devsecops/pulls)
          if [ "$RESPONSE" -ne 201 ]; then
            echo "Failed to create PR. HTTP status: $RESPONSE"
            cat response.json
            exit 1
          fi
          echo "Pull request created successfully"
